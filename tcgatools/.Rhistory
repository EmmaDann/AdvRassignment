extract.cols.ix <- function(tcga.data, prefix='', subtype=''){
cols.to.keep <- grep(colnames(tcga.data), pattern = paste0(prefix,'\\.',subtype, '$'))
## Add if statement if the prefix/subtype is not found
return(cols.to.keep)
}
extract.subtype(tcga.data,'PTEN')
cols
colnames(tcga.data)
grep(colnames(tcga.data), 'PTEN')
grep(colnames(tcga.data), pattern = 'PTEN')
colnames(tcga.data)[grep(colnames(tcga.data), pattern = 'PTEN')]
colnames(tcga.data)[grep(colnames(tcga.data), pattern = 'PTEN$')]
extract.cols.ix <- function(tcga.data, prefix='', subtype=''){
cols.to.keep <- grep(colnames(tcga.data), pattern = paste0('^',prefix,'\\.',subtype, '$'))
## Add if statement if the prefix/subtype is not found
return(cols.to.keep)
}
extract.subtype <- function(tcga.data, subtype) {
subtype.cols <- extract.cols.ix(tcga.data, subtype = subtype)
return(tcga.data[,subtype.cols])
}
head(extract.subtype(tcga.data,'PTEN'))
extract.cols.ix <- function(tcga.data, prefix='.+', subtype='.+'){ ## Regex for any
cols.to.keep <- grep(colnames(tcga.data), pattern = paste0('^',prefix,'\\.',subtype, '$'))
## Add if statement if the prefix/subtype is not found
return(cols.to.keep)
}
head(extract.subtype(tcga.data,'PTEN'))
head(extract.subtype(tcga.data,'PTENP'))
head(extract.subtype(tcga.data,'PTENP+'))
head(extract.subtype(tcga.data,'PTENP1'))
head(extract.subtype(tcga.data,'CD'))
return(tcga.data[,c('sample',subtype.cols)])
extract.subtype <- function(tcga.data, subtype) {
subtype.cols <- extract.cols.ix(tcga.data, subtype = subtype)
return(tcga.data[,c('sample',subtype.cols)])
}
head(extract.subtype(tcga.data,'PTENP1'))
head(tcga.data)
tcga.data$sample
sample.col <- grep('sample', colnames(tcga.data))
extract.subtype <- function(tcga.data, subtype) {
subtype.cols <- extract.cols.ix(tcga.data, subtype = subtype)
sample.col <- grep('sample', colnames(tcga.data))
return(tcga.data[,c(sample.col,subtype.cols)])
}
head(extract.subtype(tcga.data,'PTENP1'))
grep(colnames(tcga.data), pattern = '\\.', invert = TRUE)
grep(colnames(tcga.data), pattern = '\\.', invert = TRUE)[-sample.col]
grep(colnames(tcga.data), pattern = '\\.', invert = TRUE)[-32]
grep(colnames(tcga.data), pattern = '\\.', invert = TRUE) != sample.col
grep(colnames(tcga.data), pattern = '\\.', invert = TRUE) %in% sample.col
metadata.cols <- grep(colnames(tcga.data), pattern = '\\.', invert = TRUE)
metadata.cols <- grep(colnames(tcga.data), pattern = '[^\\.]')
metadata.cols
metadata.cols <- grep(colnames(tcga.data), pattern = '[^.]')
metadata.cols
colnames(tcga.data)
metadata.cols <- grep(colnames(tcga.data), pattern = '(?!\\.)')
metadata.cols <- grep(colnames(tcga.data), pattern = '(?!.)')
metadata.cols <- grep(colnames(tcga.data), pattern = '(?!.).')
metadata.cols <- grep(colnames(tcga.data), pattern = '(?!\\.).')
metadata.cols <- grep(colnames(tcga.data), pattern = '\\.')
metadata.cols
metadata.cols <- grep(colnames(tcga.data), pattern = "sample | \\.")
metadata.cols
metadata.cols <- grep(colnames(tcga.data), pattern = "sample | \\.", invert = TRUE)
metadata.cols
metadata.cols <- grep(colnames(tcga.data), pattern = "sample || \\.", invert = TRUE)
metadata.cols
metadata.cols <- grep(colnames(tcga.data), pattern = "sample || \\.")
metadata.cols <- grep(colnames(tcga.data), pattern = "sample || \\.")
metadata.cols
metadata.cols <- grep(colnames(tcga.data), pattern = "sample|\\.")
metadata.cols
metadata.cols <- grep(colnames(tcga.data), pattern = "sample|\\.", invert = TRUE)
metadata.cols
extract.metadata <- function(tcga.data) {
metadata.cols <- grep(colnames(tcga.data), pattern = "sample|\\.", invert = TRUE)
return(tcga.data[,metadata.cols])
}
extract.metadata(tcga.data)
subset <- merge(tcga.data[,c(sample.col,subtype.cols)], metadata, by=sample)
subtype
subtype='PTEN'
subtype.cols <- extract.cols.ix(tcga.data, subtype = subtype)
sample.col <- grep('sample', colnames(tcga.data))
if (with_metadata) {
metadata <- extract.metadata(tcga.data)
}
with_metadata=TRUE
if (with_metadata) {
metadata <- extract.metadata(tcga.data)
}
subset <- merge(tcga.data[,c(sample.col,subtype.cols)], metadata, by=sample)
tcga.data[,c(sample.col,subtype.cols)]
subset <- merge(tcga.data[,c(sample.col,subtype.cols)], metadata, by='sample')
metadata.cols <- grep(colnames(tcga.data), pattern = "\\.", invert = TRUE)
extract.metadata <- function(tcga.data) {
metadata.cols <- grep(colnames(tcga.data), pattern = "\\.", invert = TRUE)
return(tcga.data[,metadata.cols])
}
extract.subtype <- function(tcga.data, subtype, with_metadata=TRUE) {
subtype.cols <- extract.cols.ix(tcga.data, subtype = subtype)
sample.col <- grep('sample', colnames(tcga.data))
if (with_metadata) {
metadata <- extract.metadata(tcga.data)
}
subset <- merge(tcga.data[,c(sample.col,subtype.cols)], metadata, by='sample')
return()
}
head(extract.subtype('PTEN'))
head(extract.subtype(tcga.data,'PTEN'))
subtype.cols <- extract.cols.ix(tcga.data, subtype = subtype)
subtype.cols
sample.col <- grep('sample', colnames(tcga.data))
if (with_metadata) {
metadata <- extract.metadata(tcga.data)
}
metadata
subset <- merge(tcga.data[,c(sample.col,subtype.cols)], metadata, by=sample)
subset <- merge(tcga.data[,c(sample.col,subtype.cols)], metadata, by='sample')
subset
extract.subtype <- function(tcga.data, subtype, with_metadata=TRUE) {
subtype.cols <- extract.cols.ix(tcga.data, subtype = subtype)
sample.col <- grep('sample', colnames(tcga.data))
if (with_metadata) {
metadata <- extract.metadata(tcga.data)
}
subset <- merge(tcga.data[,c(sample.col,subtype.cols)], metadata, by='sample')
return(subset)
}
head(extract.subtype(tcga.data,'PTEN'))
library(devtools)
install.packages('devtools')
library(devtools)
devtools::install()
devtools::build()
devtools::check()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
devtools::check()
View(tcga.data)
devtools::build()
devtools::build()
devtools::document()
norm.columns <- function(tcga.data, cols.to.normalize, show.plot=FALSE) {
subset.tcga.data <- tcga.data[,cols.to.normalize]
norm.subset.tcga.data <- apply(subset.tcga.data, MARGIN = 2,
function(gene) (gene - median(gene, na.rm = TRUE))/mad(gene, na.rm=TRUE))
if (show.plot) {
defalut.par <- par()
par(mfrow=c(1,2), mar=c(7.1,4.1,4.1,2.1))
boxplot(subset.tcga.data, las=2, main = 'Before normalization')
boxplot(norm.subset.tcga.data, las=2, main = 'After normalization')
par() <- defalut.par ## <--- check again
}
tcga.data[,cols.to.normalize] <- norm.subset.tcga.data
return(tcga.data)
}
norm.columns(tcga.data, c(2,3))
norm.columns(tcga.data, extract.cols.ix(tcga.data, prefix = 'RNA'))
head(norm.columns(tcga.data, extract.cols.ix(tcga.data, prefix = 'RNA')))
head(norm.columns(tcga.data, extract.cols.ix(tcga.data, prefix = 'RNA')))['RNA.BRAF']
head(tcga.data)['RNA.BRAF']
devtools::check()
devtools::build()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::install()
library(tcgatools)
setwd("~/advancedR/tcgatools/tests")
getwd()
library(devtools)
devtools::use_testthat()
?context()
norm.columns(tcga.data, extract.cols(tcga.data, prefix = 'RNA'))
normalized <- norm.columns(tcga.data, extract.cols(tcga.data, prefix = 'RNA'))
extract.cols(normalized, prefix = 'RNA')
normalized[extract.cols(normalized, prefix = 'RNA')]
apply(normalized[extract.cols(normalized, prefix = 'RNA')],2,mean)
apply(normalized[extract.cols(normalized, prefix = 'RNA')],2,mean, na.rm=T)
apply(normalized[extract.cols(normalized, prefix = 'RNA')],2,median, na.rm=T)
tcga.data
extract.subtype(tcga.data,subtype = 'RNA')
extract.subtype <- function(tcga.data, subtype, with_metadata=TRUE) {
subtype.cols <- extract.cols.ix(tcga.data, prefix = subtype)
sample.col <- grep('sample', colnames(tcga.data))
if (with_metadata) {
metadata <- extract.metadata(tcga.data)
}
subset <- merge(tcga.data[,c(sample.col,subtype.cols)], metadata, by='sample')
return(subset)
}
extract.subtype(tcga.data,subtype = 'RNA')
extract.subtype(tcga.data,subtype = 'RNA', with_metadata = FALSE)
with_metadata
isTRUE(with_metadata)
isTRUE(!with_metadata)
extract.subtype <- function(tcga.data, subtype, with_metadata=TRUE) {
subtype.cols <- extract.cols.ix(tcga.data, prefix = subtype)
sample.col <- grep('sample', colnames(tcga.data))
if (with_metadata==TRUE) {
metadata <- extract.metadata(tcga.data)
}
subset <- merge(tcga.data[,c(sample.col,subtype.cols)], metadata, by='sample')
return(subset)
}
extract.metadata <- function(tcga.data) {
metadata.cols <- grep(colnames(tcga.data), pattern = "\\.", invert = TRUE)
return(tcga.data[,metadata.cols])
}
extract.subtype(tcga.data,subtype = 'RNA', with_metadata = FALSE)
extract.subtype <- function(tcga.data, subtype, with_metadata=TRUE) {
subtype.cols <- extract.cols.ix(tcga.data, prefix = subtype)
sample.col <- grep('sample', colnames(tcga.data))
if (with_metadata==TRUE) {
metadata <- extract.metadata(tcga.data)
subset <- merge(tcga.data[,c(sample.col,subtype.cols)], metadata, by='sample')
} else {
subset <- tcga.data[,c(sample.col,subtype.cols)]
}
return(subset)
}
extract.subtype(tcga.data,subtype = 'RNA', with_metadata = FALSE)
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::install()
devtools::install()
devtools::document()
devtools::document()
devtools::build()
devtools::install()
library(tcgatools)
tcga.data <- read.delim("~/advancedR/assignment/AdvR2018_ExamData.csv")
cols.to.keep <- grep(colnames(tcga.data), pattern = paste0('^',prefix,'\\.',suffix, '$'))
prefix='tumadre'
cols.to.keep <- grep(colnames(tcga.data), pattern = paste0('^',prefix,'\\.',suffix, '$'))
extract.cols.ix(tcga.data, 'tumadre')
print('Bubi')
extract.cols.ix(tcga.data, 'tumadre')
extract.cols.ix <- function(tcga.data, prefix='.+', suffix='.+'){ # Regex for any
cols.to.keep <- grep(colnames(tcga.data), pattern = paste0('^',prefix,'\\.',suffix, '$'))
# Add if statement if the prefix/subtype is not found
if (length(cols.to.keep)<1) {
print('Bubi')
}
return(cols.to.keep)
}
extract.cols.ix(tcga.data, 'tumadre')
extract.cols.ix <- function(tcga.data, prefix='.+', suffix='.+'){ # Regex for any
cols.to.keep <- grep(colnames(tcga.data), pattern = paste0('^',prefix,'\\.',suffix, '$'))
# Add if statement if the prefix/subtype is not found
stopifnot(length(cols.to.keep)>=1)
return(cols.to.keep)
}
extract.cols.ix(tcga.data, 'tumadre')
?stopifnot
extract.cols.ix <- function(tcga.data, prefix='.+', suffix='.+'){ # Regex for any
cols.to.keep <- grep(colnames(tcga.data), pattern = paste0('^',prefix,'\\.',suffix, '$'))
# Add if statement if the prefix/subtype is not found
stopifnot(cols.to.keep)
return(cols.to.keep)
}
extract.cols.ix(tcga.data, 'tumadre')
extract.cols.ix(tcga.data, 'RNA')
extract.cols.ix <- function(tcga.data, prefix='.+', suffix='.+'){ # Regex for any
cols.to.keep <- grep(colnames(tcga.data), pattern = paste0('^',prefix,'\\.',suffix, '$'))
# Add if statement if the prefix/subtype is not found
stopifnot(length(cols.to.keep)>=1)
return(cols.to.keep)
}
extract.cols.ix(tcga.data, 'RNA')
extract.cols.ix(tcga.data, prefix='RNA')
tcga.data
tcga.data <- read.csv("~/advancedR/assignment/AdvR2018_ExamData.csv")
tcga.data
extract.cols.ix(tcga.data, 'RNA')
extract.cols.ix(tcga.data, 'bub')
library(devtools)
devtools::build()
devtools::check()
norm.columns(tcga.data, 3,4,5)
norm.columns(tcga.data, c(3,4,5))
norm.columns(tcga.data, c(5))
norm.columns(tcga.data, 5)
norm.columns(tcga.data, c(5))
norm.columns(tcga.data, c(5,6))
norm.columns(tcga.data, 5)
tcga.data[,3]
norm.columns(tcga.data)
p<-tcga.data[,3]
p - median(p, na.rm=TRUE)/mad(gene, na.rm=TRUE)
p - median(p, na.rm=TRUE)/mad(p, na.rm=TRUE)
p
p - median(p, na.rm=TRUE)/mad(p, na.rm=TRUE)
norm.columns <- function(tcga.data, cols.to.normalize, show.plot=FALSE) {
subset.tcga.data <- tcga.data[,cols.to.normalize]
if (length(cols.to.normalize)==1) {
norm.subset.tcga.data <- normalize(subset.tcga.data)
}
norm.subset.tcga.data <- apply(subset.tcga.data, MARGIN = 2, normalize)
if (show.plot) {
defalut.par <- par()
par(mfrow=c(1,2), mar=c(7.1,4.1,4.1,2.1))
boxplot(subset.tcga.data, las=2, main = 'Before normalization')
boxplot(norm.subset.tcga.data, las=2, main = 'After normalization')
par() <- defalut.par ## <--- check again
}
tcga.data[,cols.to.normalize] <- norm.subset.tcga.data
return(tcga.data)
}
norm.columns(tcga.data, 3,4,5)
norm.columns(tcga.data, c(3,4,5))
normalize <- function(expression.vector){
norm.expression <- (expression.vector - median(expression.vector, na.rm = TRUE))/mad(expression.vector, na.rm=TRUE)
return(norm.expression)
}
norm.columns(tcga.data, c(3,4,5))
norm.columns(tcga.data, c(3,4,5), show.plot = TRUE)
norm.columns(tcga.data, c(3,4,5), show.plot = TRUE)
norm.columns(tcga.data, c(3), show.plot = TRUE)
norm.columns(tcga.data, 3, show.plot = TRUE)
extract.cols.ix <- function(tcga.data, prefix='.+', suffix='.+'){ # Regex for any
cols.to.keep <- grep(colnames(tcga.data), pattern = paste0('^',prefix,'\\.',suffix, '$'))
# Display error if the prefix/subtype is not found
if(length(cols.to.keep) >= 1) stop('There are columns matching the specified pattern.')
return(cols.to.keep)
}
extract.cols.ix(tcga.data, 'cubsud')
extract.cols.ix <- function(tcga.data, prefix='.+', suffix='.+'){ # Regex for any
cols.to.keep <- grep(colnames(tcga.data), pattern = paste0('^',prefix,'\\.',suffix, '$'))
# Display error if the prefix/subtype is not found
if(length(cols.to.keep) == 0) stop('There are columns matching the specified pattern.')
return(cols.to.keep)
}
extract.cols.ix(tcga.data, 'cubsud')
extract.cols.ix <- function(tcga.data, prefix='.+', suffix='.+'){ # Regex for any
cols.to.keep <- grep(colnames(tcga.data), pattern = paste0('^',prefix,'\\.',suffix, '$'))
# Display error if the prefix/subtype is not found
if(length(cols.to.keep) == 0) stop('There are no column names matching the specified pattern.')
return(cols.to.keep)
}
norm.columns(tcga.data, c(3), show.plot = TRUE)
norm.columns(tcga.data, 3, show.plot = TRUE)
norm.columns <- function(tcga.data, cols.to.normalize, show.plot=FALSE) {
subset.tcga.data <- tcga.data[,cols.to.normalize]
if (length(cols.to.normalize)==1) {
norm.subset.tcga.data <- normalize(subset.tcga.data)
} else{
norm.subset.tcga.data <- apply(subset.tcga.data, MARGIN = 2, normalize)
}
if (show.plot) {
defalut.par <- par()
par(mfrow=c(1,2), mar=c(7.1,4.1,4.1,2.1))
boxplot(subset.tcga.data, las=2, main = 'Before normalization')
boxplot(norm.subset.tcga.data, las=2, main = 'After normalization')
}
tcga.data[,cols.to.normalize] <- norm.subset.tcga.data
return(tcga.data)
}
norm.columns(tcga.data, 3, show.plot = TRUE)
norm.columns(tcga.data, show.plot = TRUE)
extract.subtype <- function(tcga.data, subtype, with_metadata=TRUE) {
subtype.cols <- extract.cols.ix(tcga.data, prefix = subtype)
sample.col <- grep('sample', colnames(tcga.data))
if (with_metadata==TRUE) {
metadata <- extract.metadata(tcga.data)
subset <- merge(tcga.data[,c(sample.col,subtype.cols)], metadata, by='sample')
} else {
subset <- tcga.data[,c(sample.col,subtype.cols)]
}
return(subset)
}
extract.subtype(tcga.data,'RNA', with_metadata = FALSE)
extract.subtype(tcga.data,'RNA', with_metadata = TRUE)
extract.subtype(tcga.data,'RNA', with_metadata = FALSE)
extract.subtype(tcga.data,'pppp', with_metadata = FALSE)
extract.subtype(tcga.data,'AKT', with_metadata = FALSE)
devtools::test()
devtools::test()
devtools::test()
test_check("tcgatools")
devtools::test()
?test_check
devtools::test()
?context
devtools::test()
devtools::test()
?context
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
?test_check
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::build("tcgatools")
devtools::build
devtools::test()
norm.columns <- function(tcga.data, cols.to.normalize, show.plot=FALSE) {
subset.tcga.data <- tcga.data[,cols.to.normalize]
if (length(cols.to.normalize)==1) {
norm.subset.tcga.data <- normalize(subset.tcga.data)
} else{
norm.subset.tcga.data <- apply(subset.tcga.data, MARGIN = 2, normalize)
}
# Show boxplots of normalized data before and after normalization
if (show.plot) {
plot.normalization(subset.tcga.data, norm.subset.tcga.data)
}
tcga.data[,cols.to.normalize] <- norm.subset.tcga.data
return(tcga.data)
}
plot.normalization <- function(subset.tcga.data, norm.subset.tcga.data){
# Boxplots to compare non-normalized and normalized data
defalut.par <- par()
par(mfrow=c(1,2), mar=c(7.1,4.1,4.1,2.1))
boxplot(subset.tcga.data, las=2, main = 'Before normalization')
boxplot(norm.subset.tcga.data, las=2, main = 'After normalization')
}
norm.columns(tcga.data, c(4,5,6))
norm.columns(tcga.data, c(4,5,6), show.plot = FALSE)
norm.columns(tcga.data, c(4,5,6), show.plot = TRUE)
plot.normalization <- function(subset.tcga.data, norm.subset.tcga.data){
# Boxplots to compare non-normalized and normalized data
defalut.par <- par()
par(mfrow=c(1,2), mar=c(7.1,4.1,4.1,2.1))
boxplot(subset.tcga.data, las=2, main = 'Before normalization', ylab='expression level')
boxplot(norm.subset.tcga.data, las=2, main = 'After normalization', ylab='expression level')
}
norm.columns(tcga.data, 30)
colnames(tcga.data)
norm.columns(tcga.data, 93)
plot.normalization <- function(subset.tcga.data, norm.subset.tcga.data){
# Boxplots to compare non-normalized and normalized data
defalut.par <- par()
par(mfrow=c(1,2), mar=c(7.1,4.1,4.1,2.1))
boxplot(subset.tcga.data, las=2, main = 'Before normalization', ylab='expression level')
boxplot(norm.subset.tcga.data, las=2, main = 'After normalization', ylab='normalized expression level')
}
norm.columns(tcga.data, 30)
norm.columns(tcga.data, 30, show.plot = TRUE)
norm.columns(tcga.data, c(30,31), show.plot = TRUE)
norm.columns(tcga.data, c(34,31), show.plot = TRUE)
norm.columns(tcga.data, c(34,35), show.plot = TRUE)
colnames(tcga.data)
norm.columns(tcga.data, c(32,70), show.plot = TRUE)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
tcga <- read.csv('~/advancedR/assignment/AdvR2018_ExamData.csv')
tcga
tcga[1:20,]
example.tcga.table <- tcga[1:20,]
save(example.tcga.table, file = 'example_data/')
save(example.tcga.table, file = 'example_data/exampleData.RData')
devtools::check()
?data
devtools::build()
save(example.tcga.table, file = 'example_data/tcgaData.RData')
save(example.tcga.table, file = 'data/tcgaData.RData')
data("tcgaData")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::docy
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(graphics)
devtools::check()
tcgatools::example.tcga.table
tcgatools::stats
detach("package:graphics", unload=TRUE)
detach("package:stats", unload=TRUE)
devtools::check()
devtools::document()
devtools::check()
@examples norm.columns(example.tcga.table, cols.to.normalize = columns.of.interest)
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
library(tcg])
library(tcga)
library(tcgatools)
?tcgatools::
?tcgatools
tcgatools::extract.metadata()
